/**********************************************************************
 Java CUP specification for a parser for cflat programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;

non terminal FnDeclNode       fnDecl; 
non terminal StructDeclNode   structDecl;
non terminal LinkedList       varDeclList; 
non terminal LinkedList       structBody;
non terminal FormalsListNode  formals; 
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList; 
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal CallExpNode      fncall; 
non terminal LinkedList       actualList;
non terminal ExpNode          loc;



 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left DOT; 
precedence left OR; 
precedence left AND; 
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS; 
precedence left TIMES, DIVIDE; 
precedence nonassoc NOT; 



start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v 
                {: RESULT = v;
                :} 
                | 
                fnDecl:f 
                {: RESULT = f;
                :} 
                |
                structDecl:s
                {: RESULT = s;
                :} 
                ;

varDeclList     ::= varDeclList:vdl varDecl:vd
                {: vdl.addLast(vd);
                   RESULT = vdl; 
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

formals         ::= LPAREN RPAREN 
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | 
                LPAREN formalsList:fl RPAREN 
                {: RESULT = new FormalsListNode(fl);
                :} 
                ;

formalsList     ::= formalDecl:fd
                {: LinkedList<FormalDeclNode> fdn = new LinkedList<FormalDeclNode>();
                fdn.addLast(fd);  
                RESULT = fdn;
                :}  
                | formalDecl:fd COMMA formalsList:fl 
                {: fl.addFirst(fd); 
                RESULT = fl; 
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i); 
                :}
                ;

fnBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sl));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl; 
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                |
                STRUCT id:i1 id:i2 SEMICOLON 
                {: RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:fl fnBody:b
                {: RESULT = new FnDeclNode(t, i, fl, b);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;    

structBody      ::= structBody:sb varDecl:vd 
                {: sb.addLast(vd); 
                RESULT = sb; 
                :}
                | varDecl:vd 
                {: LinkedList<VarDeclNode> vdn = new LinkedList<VarDeclNode>(); 
                vdn.addLast(vd); 
                RESULT = vdn; 
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                ;

type            ::= BOOL
                {: RESULT = new BoolNode();
                :}
                ;

type            ::= VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {:
                RESULT= new AssignStmtNode(ae);
                :}
                |loc:i PLUSPLUS SEMICOLON
                {:
                RESULT = new PostIncStmtNode(i);
                :}               
                |loc:i MINUSMINUS SEMICOLON
                {:
                RESULT = new PostDecStmtNode(i);
                :}
                |CIN READ loc:i SEMICOLON
                {:
                RESULT = new ReadStmtNode(i);
                :}
                |COUT WRITE exp:e SEMICOLON
                {:
                RESULT = new WriteStmtNode(e);
                :}
                |IF LPAREN exp:e RPAREN LCURLY varDeclList:dlst stmtList:slst RCURLY
                {:
                RESULT = new IfStmtNode(e, new DeclListNode(dlst), new StmtListNode(slst));
                :}
                |
                IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:sl2 RCURLY
                {: RESULT = new IfElseStmtNode(e, 
                            new DeclListNode(vdl), 
                            new StmtListNode(sl), 
                            new DeclListNode(vdl2), 
                            new StmtListNode(sl2));
                :}
                | 
                WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY 
                {: RESULT = new WhileStmtNode(e, 
                            new DeclListNode(vdl), 
                            new StmtListNode(sl));
                :}
                |
                REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: RESULT = new RepeatStmtNode(e, 
                            new DeclListNode(vdl), 
                            new StmtListNode(sl));
                :}
                |
                RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | fncall:fnc SEMICOLON
                {: RESULT = new CallStmtNode(fnc);
                :}
                ;

assignExp       ::= loc:i ASSIGN exp:e
                {:
                RESULT = new AssignNode(i,e);
                :}
                ;

exp             ::= assignExp:ae
                {:
                RESULT = ae;
                :}
                |exp:e1 PLUS exp:e2
                {:
                RESULT = new PlusNode(e1, e2);
                :}
                |exp:e1 MINUS exp:e2
                {:
                RESULT = new MinusNode(e1, e2);
                :}
                |exp:e1 TIMES exp:e2
                {:
                RESULT = new TimesNode(e1, e2);
                :}
                |exp:e1 DIVIDE exp:e2
                {:
                RESULT = new DivideNode(e1, e2); 
                :}
                |NOT exp:e
                {:
                RESULT = new NotNode(e);
                :}
                |exp:e1 AND exp:e2
                {:
                RESULT = new AndNode(e1, e2);
                :}
                |exp:e1 OR exp:e2
                {:
                RESULT = new OrNode(e1, e2);
                :}
                | exp:e EQUALS exp:e2 
                {: RESULT = new EqualsNode(e, e2); 
                :} 
                | exp:e NOTEQUALS exp:e2 
                {: RESULT = new NotEqualsNode(e, e2); 
                :} 
                | exp:e LESS exp:e2 
                {: RESULT = new LessNode(e, e2); 
                :} 
                | exp:e GREATER exp:e2
                {: RESULT = new GreaterNode(e, e2); 
                :} 
                | exp:e LESSEQ exp:e2
                {: RESULT = new LessEqNode(e, e2); 
                :} 
                | exp:e GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e, e2); 
                :} 
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t); 
                :} 
                | term:t
                {: RESULT = t; 
                :}
                ; 

term            ::= loc:i
                {: RESULT = i;
                :}              
                | INTLITERAL:I
                {: RESULT = new IntLitNode(I.linenum, I.charnum, I.intVal);
                :}
                | STRINGLITERAL:S
                {: RESULT = new StringLitNode(S.linenum, S.charnum, S.strVal);
                :}
                | TRUE:T
                {: RESULT = new TrueNode(T.linenum, T.charnum);
                :}
                | FALSE:F 
                {: RESULT = new FalseNode(F.linenum, F.charnum); 
                :} 
                | LPAREN exp:e RPAREN
                {: RESULT = e; 
                :} 
                | fncall:fc 
                {: RESULT = fc; 
                :}
                ;

fncall          ::= id:i LPAREN RPAREN 
                {: RESULT = new CallExpNode(i); 
                :} 
                | id:i LPAREN actualList:al RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(al)); 
                :}
                ;

actualList      ::= exp:e
                {: LinkedList<ExpNode> ll = new LinkedList<ExpNode>(); 
                ll.addLast(e); 
                RESULT = ll; 
                :}
                | actualList:al COMMA exp:e 
                {: al.addLast(e); 
                RESULT = al; 
                :}
                ;

loc             ::= id:i
                {:
                RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                RESULT = new DotAccessExpNode(l, i);
                :};


